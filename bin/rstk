require "rstk"
require "optparse"
params = ARGV.getopts('ac:e:d:m:', 'all', 'home', 'commit')

# task.add_from_cmdline({"name"=> "add test"})
#  task.add_from_cmdline({"name"=> "add test", "category" => "waiting"})
# task.delete( 20160214122152 )
# task.delete( 201 )
# task.add
#
#
kaisya = true
if params["home"]
  kaisya = false
end

if params["a"]
  # add task
  task = Rstk::Task.new
  if params["m"]
    task.add_from_cmdline({"name" => params["m"]})
  else
    task.add
  end
elsif params["e"]
  # edit task
  task = Rstk::Task.new
  task.edit params["e"]
elsif params["c"]
  # show category task
  params["c"]
  task = Rstk::Task.new
  task.show({"category" => "#{params['c']}"})
elsif params["all"]
  task = Rstk::Task.new
  task.show({})
elsif params["d"]
  task = Rstk::Task.new
  task.delete(params["d"])
elsif params["commit"]
  begin
    log = Logger.new(STDOUT)
    log.level = Logger::Severity::INFO
    g = Git.open("/home/hilolih/GTD", :log => log)
    g.commit_all('update')
    g.push('sakura')
    puts "[*] git commitしました。"
  rescue Git::GitExecuteError => e
    puts "[!] 最新でした"
  end
else
  task = Rstk::Task.new

  task.where([{
    "done"     => false,
    "kaisya"   => kaisya,
    "category" => [ "next action", "waiting", ""]
  },{
    "due-date" => {:before => "Today"}, "done" => false, "kaisya" => kaisya
  }])
end

